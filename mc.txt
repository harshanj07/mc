//jugs
from collections import deque

def is_goal(state, target):
    """Check if the state meets the goal condition."""
    return state[0] == target or state[1] == target

def generate_next_states(state, capacity_x, capacity_y):
    """Generate all possible valid next states from the current state."""
    x, y = state
    states = []

    # Fill Jug X
    states.append((capacity_x, y, f"Fill X ({capacity_x}L)"))

    # Fill Jug Y
    states.append((x, capacity_y, f"Fill Y ({capacity_y}L)"))

    # Empty Jug X
    states.append((0, y, "Empty X"))

    # Empty Jug Y
    states.append((x, 0, "Empty Y"))

    # Pour X → Y
    pour_x_to_y = min(x, capacity_y - y)  # Max amount that can be poured
    states.append((x - pour_x_to_y, y + pour_x_to_y, f"Pour X → Y ({pour_x_to_y}L)"))

    # Pour Y → X
    pour_y_to_x = min(y, capacity_x - x)  # Max amount that can be poured
    states.append((x + pour_y_to_x, y - pour_y_to_x, f"Pour Y → X ({pour_y_to_x}L)"))

    # Return only valid states (within jug capacity)
    return [(nx, ny, action) for nx, ny, action in states if 0 <= nx <= capacity_x and 0 <= ny <= capacity_y]

def solve_water_jug(capacity_x, capacity_y, target):
    """Find the shortest sequence of steps using BFS to measure Z liters."""
    initial_state = (0, 0)  # Both jugs start empty
    queue = deque([(initial_state, [])])  # Queue stores (state, path_taken)
    visited = set()  # Track visited states

    while queue:
        (x, y), path = queue.popleft()

        # If the goal is reached, return the steps
        if is_goal((x, y), target):
            return path + [f"Final State: ({x},{y}) ✅"]

        # Track visited states
        if (x, y) in visited:
            continue
        visited.add((x, y))

        # Generate next valid states and add to queue
        for nx, ny, action in generate_next_states((x, y), capacity_x, capacity_y):
            queue.append(((nx, ny), path + [action]))

    return "No solution found ❌"

# Get input from user
capacity_x = int(input("Enter capacity of Jug X: "))
capacity_y = int(input("Enter capacity of Jug Y: "))
target = int(input("Enter target amount (Z): "))

solution = solve_water_jug(capacity_x, capacity_y, target)

# Print solution
if isinstance(solution, list):
    print("\nSolution found:")
    for step in solution:
        print(step)
else:
    print(solution)



//M&C
from collections import deque
class MissionariesAndCanibals: 
    def __init__(self):
        self.initialState=(3,3,0)
        self.goalState = (0,0,1)
        self.moves = [(1,0),(2,0),(1,1),(0,2),(0,1)]
        self.visited = set()       
    def isValid(self,state):
        M_left, C_left, _ = state
        M_right, C_right, _ = 3 - M_left, 3 - C_left, 1  # People on the right bank
        return (
            (M_left == 0 or M_left >= C_left) and  # Left bank condition
            (M_right == 0 or M_right >= C_right)  # Right bank condition
        )               
    def get_valid_states(self,state):
        valid_states=[]
        for m,c in self.moves:          
            if state[2] == 0:
                new_state = (state[0] - m,state[1]-c , 1)
            else:
                new_state = (state[0] + m,state[1] + c , 0)
                
            if new_state[0] >= 0 and new_state[1] >=0 and  self.isValid(new_state):
                valid_states.append(new_state)
                
        return valid_states
    
    def solve(self):
        initial_state = self.initialState
        queue = deque()
        queue.append((initial_state , []))
        while queue:
            curr_state , path = queue.popleft()
            if curr_state not in self.visited :
                self.visited.add(curr_state)             
                new_path = path + [curr_state]
                            
                if curr_state == self.goalState:
                    return new_path
                
                curlist = self.get_valid_states(curr_state)
                        
                for neighbour in curlist:
                    queue.append((neighbour,new_path))
                    
        return "no solution found"
object = MissionariesAndCanibals()
print(object.solve())

